{
  "stats": {
    "suites": 1,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2022-02-22T11:29:40.025Z",
    "end": "2022-02-22T11:29:58.538Z",
    "duration": 18513,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "477cd378-f8cd-4334-b0e2-ed6d83824eb3",
      "title": "",
      "fullFile": "cypress/integration/nav.feature",
      "file": "cypress/integration/nav.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f12d5473-2566-4707-9c0c-015362e3f5d5",
          "title": "Nav Function",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC001 - Verify nav contains movie & People movie (example #1)",
              "fullTitle": "Nav Function TC001 - Verify nav contains movie & People movie (example #1)",
              "timedOut": null,
              "duration": 7534,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "4bc5b111-d94b-4d47-9905-36db49bd5f88",
              "parentUUID": "f12d5473-2566-4707-9c0c-015362e3f5d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC001 - Verify nav contains movie & People people (example #2)",
              "fullTitle": "Nav Function TC001 - Verify nav contains movie & People people (example #2)",
              "timedOut": null,
              "duration": 871,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "05bbfec1-9d17-4ca6-b791-133b5af010c1",
              "parentUUID": "f12d5473-2566-4707-9c0c-015362e3f5d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC001 - Verify nav contains movie & People new (example #3)",
              "fullTitle": "Nav Function TC001 - Verify nav contains movie & People new (example #3)",
              "timedOut": null,
              "duration": 801,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "402cd51f-3656-443e-b22c-a5592822f9e6",
              "parentUUID": "f12d5473-2566-4707-9c0c-015362e3f5d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC002 - Verify nav link navigate to the right page people (example #1)",
              "fullTitle": "Nav Function TC002 - Verify nav link navigate to the right page people (example #1)",
              "timedOut": null,
              "duration": 2008,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "d86353c3-8c1b-4e22-897c-ec8df1bcd472",
              "parentUUID": "f12d5473-2566-4707-9c0c-015362e3f5d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC002 - Verify nav link navigate to the right page movie (example #2)",
              "fullTitle": "Nav Function TC002 - Verify nav link navigate to the right page movie (example #2)",
              "timedOut": null,
              "duration": 1394,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "ae3a3add-5179-4292-aa58-1736eb1777c3",
              "parentUUID": "f12d5473-2566-4707-9c0c-015362e3f5d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC003 - Verify user can see actor profile page",
              "fullTitle": "Nav Function TC003 - Verify user can see actor profile page",
              "timedOut": null,
              "duration": 2713,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "1c127d8e-bda8-42b1-ac5f-65448902bc96",
              "parentUUID": "f12d5473-2566-4707-9c0c-015362e3f5d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC004 - Verify user can see actor profile page",
              "fullTitle": "Nav Function TC004 - Verify user can see actor profile page",
              "timedOut": null,
              "duration": 3120,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "8f269966-0de4-4ca0-b6f1-0fe13ad06757",
              "parentUUID": "f12d5473-2566-4707-9c0c-015362e3f5d5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4bc5b111-d94b-4d47-9905-36db49bd5f88",
            "05bbfec1-9d17-4ca6-b791-133b5af010c1",
            "402cd51f-3656-443e-b22c-a5592822f9e6",
            "d86353c3-8c1b-4e22-897c-ec8df1bcd472",
            "ae3a3add-5179-4292-aa58-1736eb1777c3",
            "1c127d8e-bda8-42b1-ac5f-65448902bc96",
            "8f269966-0de4-4ca0-b6f1-0fe13ad06757"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18441,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": {
        "reporterEnabled": "mochawesome",
        "mochawesomeReporterOptions": {
          "reportDir": "cypress/reports/mocha",
          "quite": true,
          "overwrite": true,
          "html": false,
          "json": true
        }
      },
      "version": "5.2.0"
    }
  }
}